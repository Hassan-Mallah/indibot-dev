from bot.utils import main_menu, enter_name, enter_email_phone, enter_city
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, \
    ReplyKeyboardRemove
import requests
import os
import re

os.environ['BOT_TOKEN'] = '1277759652:AAEqz7vixRjOPOu6nkO9b5-jKd80jTqhPpU'
os.environ['API_URL'] = 'http://127.0.0.1:8000/'
os.environ['API_TOKEN'] = 'b213fc249d66d3dafb2a1ce3c60733addbda2f28'
API_TOKEN = os.environ.get('API_TOKEN')
User_Link = os.environ.get('API_URL') + 'User/'
headers = {'Authorization': 'token ' + API_TOKEN}
Review_Link = os.environ.get('API_URL') + 'Review/'
EMAIL_OR_PHONE = ''
TYPE = SUBTYPE = 0

AGREEMENT, NAME, PHONE_EMAIL, REVIEW, USER_INPUT = range(5)  # conv_handler states


def agreement(update, context):
    query = update.callback_query
    # enter your name
    if query.data == 'yes':
        enter_name(update, context)
        return NAME
    # ask to share information
    elif query.data == 'no':
        text = '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ <a href="http://www.acdamate.com/terms-of-use/">–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</a>'
        keyboard = [[
            InlineKeyboardButton('‚úÖ –î–∞', callback_data='yes'),
            InlineKeyboardButton('‚õîÔ∏è  –ù–µ—Ç', callback_data='no')
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=reply_markup,
                                 parse_mode='Html')


def start(update, context):
    user_id = update['message']['chat']['id']
    username = update['message']['chat']['username']

    request = requests.get(User_Link + str(user_id), headers=headers).json()

    if 'detail' in request:
        data = {
            'telegram_id': user_id,
            'username': username
        }
        requests.post(User_Link, data=data, headers=headers)
        text = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç –ò–Ω–¥–∏–ª–∞–π—Ç ü§ñ. –í—ã —Å–æ–≥–ª–∞—Å–Ω—ã <a href="http://www.acdamate.com/terms-of-use/">–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</a>?'
        # ask to share information
        keyboard = [[
            InlineKeyboardButton('‚úÖ –î–∞', callback_data='yes'),
            InlineKeyboardButton('‚õîÔ∏è  –ù–µ—Ç', callback_data='no')
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Html')
        return AGREEMENT
    # name not entered
    elif request['name'] == '':
        enter_name(update, context)
        return NAME
    # contact not entered yet
    elif request['email'] == '' and request['phone'] == '':
        enter_email_phone(update, context)
        return PHONE_EMAIL
    elif request['city'] == '':
        enter_city(update, context)
        return REVIEW
    else:
        main_menu(update, context)
        return REVIEW


def name(update, context):
    # save name
    fullname = update['message']['text']
    user_id = update['message']['chat']['id']
    data = {
        'name': fullname
    }
    requests.patch(User_Link + str(user_id) + '/', data=data, headers=headers)

    # enter phone or email
    enter_email_phone(update, context)
    return PHONE_EMAIL


def phone_email(update, context):
    global EMAIL_OR_PHONE
    query = update.callback_query
    if query.data == 'phone':
        EMAIL_OR_PHONE = 'PHONE'
        text = '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 7********** –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"'
        keyboard = [[KeyboardButton('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º', request_contact=True)]]
        reply_markup = ReplyKeyboardMarkup(keyboard)
        context.bot.send_message(chat_id=update.effective_chat.id, text=text, parse_mode='Html',
                                 reply_markup=reply_markup)
    elif query.data == 'email':
        EMAIL_OR_PHONE = 'EMAIL'
        text = '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π e-mail'
        context.bot.send_message(chat_id=update.effective_chat.id, text=text, parse_mode='Html')


def check_phone_email(update, context):
    user_data = update['message']['text']
    user_id = update['message']['chat']['id']
    # save email or phone
    if update['_effective_message']['contact']:
        data = {
            'phone': update['_effective_message']['contact']['phone_number']
        }
        requests.patch(User_Link + str(user_id) + '/', data=data, headers=headers)
        enter_city(update, context)
        return REVIEW
    elif re.match(r'(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)', user_data):
        data = {'email': user_data}
        requests.patch(User_Link + str(user_id) + '/', data=data, headers=headers)
        enter_city(update, context)
        return REVIEW
    elif re.match(r'^((\+7|7|8)+([0-9]){10})$', user_data):
        data = {'phone': user_data}
        requests.patch(User_Link + str(user_id) + '/', data=data, headers=headers)
        enter_city(update, context)
        return REVIEW
    # data entered is incorrect
    else:
        if EMAIL_OR_PHONE == 'EMAIL':
            text = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ—á—Ç—ã'
            reply_markup = ReplyKeyboardRemove()
            context.bot.send_message(chat_id=update.effective_chat.id, text=text, parse_mode='Html',
                                     reply_markup=reply_markup)
        else:
            text = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
            reply_markup = ReplyKeyboardRemove()
            context.bot.send_message(chat_id=update.effective_chat.id, text=text, parse_mode='Html',
                                     reply_markup=reply_markup)


def review(update, context):
    # save city
    user_id = update['message']['chat']['id']
    request = requests.get(User_Link + str(user_id), headers=headers).json()

    if request['city'] == '':
        user_city = update['message']['text']
        data = {
            'city': user_city
        }
        requests.patch(User_Link + str(user_id) + '/', data=data, headers=headers)

    main_menu(update, context)
    return REVIEW


def cooperation(update, context):
    text = '–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ –ø–æ—á—Ç—É info@acdamate.com'
    context.bot.send_message(chat_id=update.effective_chat.id, text=text, parse_mode='Html')

    main_menu(update, context)


def user_input(update, context):
    user_id = update['message']['chat']['id']
    text = update['message']['text']

    while '\n' in text:
        text = text.replace('\n', ' ')

    data = {
        'telegram_id': user_id,
        'reviewtype_id': TYPE,
        'reviewsubtype_id': SUBTYPE,
        'text': text
    }
    requests.post(Review_Link, data=data, headers=headers)
    text = '–°–ø–∞—Å–∏–±–æ, –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!'
    keyboard = [[InlineKeyboardButton('‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    context.bot.send_message(text=text, chat_id=update.effective_chat.id, reply_markup=reply_markup, parse_mode='Html')

    return USER_INPUT


def subtype(update, context):
    global SUBTYPE
    query = update.callback_query
    SUBTYPE = data = query.data
    reply_markup = ReplyKeyboardRemove()
    text = ''
    # –ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ - product_quality
    if data == '2':
        text = '–ü—Ä–æ–¥—É–∫—Ü–∏—è –ò–Ω–¥–∏–ª–∞–π—Ç –æ—Ö–ª–∞–∂–¥–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≥–∞–∑–∞, –ø–æ—ç—Ç–æ–º—É –ø–µ—Ä–≤—ã–µ —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –º—è—Å–æ –∏ —É–ø–∞–∫–æ–≤–∫–∞ –º–æ–≥—É—Ç –ø–∞—Ö–Ω—É—Ç—å —ç—Ç–∏–º –≥–∞–∑–æ–º. –ß–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç –∑–∞–ø–∞—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å—á–µ–∑–∞–µ—Ç, –æ–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ —É –≤–∞—Å —ç—Ç–æ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.'
    elif data == '3':
        text = '–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç —Ä–∞–∑–¥–µ–ª–∫–∏ –¥–æ –ø–æ–ª–∫–∏ –∑–∞–Ω–∏–º–∞–µ—Ç 8 —á–∞—Å–æ–≤, –æ–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ –≤—ã –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ–¥–æ–≤–æ–ª—å–Ω—ã —Å–≤–µ–∂–µ—Å—Ç—å—é –Ω–∞—à–µ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–∫–∞–∂–∏—Ç–µ, –≤ –∫–∞–∫–æ–º –º–∞–≥–∞–∑–∏–Ω–µ –±—ã–ª–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ü–∏—è.'

    # –£–ø–∞–∫–æ–≤–∫–∞ - packging
    elif data == '8':
        text = '–ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º –ø–æ–∏—Å–∫–µ —Ä–µ—à–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∑–≤–æ–ª—è—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≤–µ–∂–µ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞. –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –ø–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è –≥–∞–∑–æ-–≤–∞–∫—É—É–º–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–∞ —Ç–∏–ø–æ–º 5. –¶–∏—Ñ—Ä–æ–π 7 –º–∞—Ä–∫–∏—Ä—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–ª–µ–Ω–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–µ.'
    # –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã - certificates
    elif data == '9':
        context.bot.send_photo(chat_id=update.effective_chat.id, photo=open('halal_certificate.jpeg', 'rb'))
        text = '–í—Å—è –ø—Ä–æ–¥—É–∫—Ü–∏—è –ò–Ω–¥–∏–ª–∞–π—Ç, –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –∫—É–ø–∞—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∫–∞—á–µ—Å—Ç–≤–∞ –•–∞–ª—è–ª—å'
    elif data == '10':
        context.bot.sendDocument(chat_id=update.effective_chat.id, document=open('SanPin_certificate.pdf', 'rb'))
        text = '–í—Å—è –ø—Ä–æ–¥—É–∫—Ü–∏—è –ò–Ω–¥–∏–ª–∞–π—Ç –ø—Ä–æ—à–ª–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ì–û–°–¢ –† –ò–°–û 22000-2019 –∏ –ì–û–°–¢ –† –ò–°–û 9001-2015'
    # go back to menu
    elif data == 'menu':
        main_menu(update, context)
        return REVIEW

    # send subtype msg
    if text != '':
        context.bot.send_message(chat_id=update.effective_chat.id, text=text, parse_mode='Html',
                                 reply_markup=reply_markup)

    if not data in ['email', 'phone']:
        if text != '':
            text = '–û—Å—Ç–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
            keyboard = [[InlineKeyboardButton('‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            context.bot.send_message(chat_id=update.effective_chat.id, text=text, parse_mode='Html',
                                     reply_markup=reply_markup)
            return USER_INPUT
        else:
            text = '–û—Å—Ç–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
            msg = context.bot.send_message(chat_id=update.effective_chat.id, text=text, parse_mode='Html',
                                           reply_markup=reply_markup)
            id = msg['message_id']
            context.bot.delete_message(text='hhh', chat_id=update.effective_chat.id, message_id=id)

            keyboard = [[InlineKeyboardButton('‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            context.bot.send_message(text=text, chat_id=update.effective_chat.id, message_id=id,
                                     reply_markup=reply_markup)
            return USER_INPUT


def product_quality(update, context):
    global TYPE
    TYPE = 1
    text = '–ò–Ω–¥–∏–ª–∞–π—Ç —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥–∏—Ç –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞–µ—Ç —Å–≤–æ–∏—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π. –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞—à–µ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏'
    keyboard = [[
        InlineKeyboardButton('–ó–∞–ø–∞—Ö', callback_data='2'),
        InlineKeyboardButton('‚ùÑÔ∏è –°–≤–µ–∂–µ—Å—Ç—å', callback_data='3')],
        [InlineKeyboardButton('üçó –ö–æ—Å—Ç–∏', callback_data='4')],
        [InlineKeyboardButton('‚úèÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ', callback_data='1')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=reply_markup)


def product_availability(update, context):
    global TYPE
    TYPE = 2
    text = '–ù–∞–ª–∏—á–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏'
    keyboard = [
        [InlineKeyboardButton('üö´ –ü—Ä–æ–ø–∞–ª–æ –∏–∑ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞', callback_data='5')],
        # [InlineKeyboardButton('‚ùì –ì–¥–µ –≤–∞—Å –Ω–∞–π—Ç–∏?', callback_data='6')],
        [InlineKeyboardButton('‚úèÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ', callback_data='1')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=reply_markup)


def packaging(update, context):
    global TYPE
    TYPE = 3
    text = '–£–ø–∞–∫–æ–≤–∫–∞'
    keyboard = [
        [InlineKeyboardButton('‚ùóÔ∏è –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ', callback_data='7'),
         InlineKeyboardButton('‚ôªÔ∏è –ü–ª–∞—Å—Ç–∏–∫', callback_data='8')],
        [InlineKeyboardButton('‚úèÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ', callback_data='1')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=reply_markup)


def certificates(update, context):
    global TYPE
    TYPE = 4
    text = '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã'
    keyboard = [[
        InlineKeyboardButton('–•–∞–ª—è–ª—å', callback_data='9'),
        InlineKeyboardButton('–°–∞–Ω–ü–∏–Ω', callback_data='10')],
        [InlineKeyboardButton('‚úèÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ', callback_data='1')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=reply_markup)